prototype(Jonnitto.TextWithPlyr:Tag) < prototype(Neos.Fusion:Value) {
    config = ${Configuration.setting('Jonnitto.TextWithPlyr')}
    alignment = ${q(node).property('alignment')}
    align = ${this.alignment ? this.alignment : this.config.defaultAlignment}
    hasRow = ${this.align == 'left' || this.align == 'right' ? true : false}
    nodeType = ${String.toLowerCase(String.pregReplace(q(node).property('_nodeType.name'), '/[[:^alnum:]]/', '-'))}

    media = Jonnitto.Plyr:Tag {
        editable = false
    }

    @context {
        config = ${this.config}
        align = ${this.align}
        hasRow = ${this.hasRow}
        nodeType = ${this.nodeType}
        media = ${this.media}
    }

    value = Neos.Fusion:Tag {
        @context {
            media = Neos.Fusion:Tag {
                attributes.class = ${hasRow ? config.class.colMedia : config.class.alignment[align]}
                content = ${media}
            }

            text = Neos.Fusion:Tag {
                @context.property = ${'text'}
                attributes.class = ${hasRow ? config.class.colText : false}
                content = ${q(node).property(property)}
                @process {
                    convertUris = Neos.Neos:ConvertUris
                    contentElementEditable = Neos.Neos:ContentElementEditable
                }
            }
        }

        attributes {
            class = Neos.Fusion:RawArray {
                nodeType = ${nodeType}
                container = ${config.container}
                align = ${'-' + String.toLowerCase(align)}
                container = ${hasRow ? config.class.hasRow : config.class.hasFloat}
            }
        }

        content = Neos.Fusion:Case {
            hasRow {
                condition = ${hasRow}
                renderer = Neos.Fusion:Tag {
                    attributes.class = Neos.Fusion:RawArray {
                        row = ${config.class.row}
                        align = ${config.class.alignment[align]}
                    }
                    content = ${text + media}
                }
            }
            hasFloat {
                condition = true
                renderer = ${media + text}
            }
        }
    }

    @process.contentElementWrapping {
        expression = Neos.Neos:ContentElementWrapping
        @position = 'end 999999999'
    }

    @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}
